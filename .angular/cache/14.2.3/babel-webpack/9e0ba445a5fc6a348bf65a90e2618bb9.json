{"ast":null,"code":"/*! @azure/msal-browser v2.28.3 2022-09-12 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { AsyncMemoryStorage } from './AsyncMemoryStorage.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar CryptoKeyStoreNames = /*#__PURE__*/(function () {\n  (function (CryptoKeyStoreNames) {\n    CryptoKeyStoreNames[\"asymmetricKeys\"] = \"asymmetricKeys\";\n    CryptoKeyStoreNames[\"symmetricKeys\"] = \"symmetricKeys\";\n  })(CryptoKeyStoreNames || (CryptoKeyStoreNames = {}));\n\n  return CryptoKeyStoreNames;\n})();\n\n/**\r\n * MSAL CryptoKeyStore DB Version 2\r\n */\nvar CryptoKeyStore =\n/** @class */\nfunction () {\n  function CryptoKeyStore(logger) {\n    this.logger = logger;\n    this.asymmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.asymmetricKeys);\n    this.symmetricKeys = new AsyncMemoryStorage(this.logger, CryptoKeyStoreNames.symmetricKeys);\n  }\n\n  CryptoKeyStore.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Delete in-memory keystores\n            this.asymmetricKeys.clearInMemory();\n            this.symmetricKeys.clearInMemory();\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.asymmetricKeys.clearPersistent()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 3:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof Error) {\n              this.logger.error(\"Clearing keystore failed with error: \" + e_1.message);\n            } else {\n              this.logger.error(\"Clearing keystore failed with unknown error\");\n            }\n\n            return [2\n            /*return*/\n            , false];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return CryptoKeyStore;\n}();\n\nexport { CryptoKeyStore, CryptoKeyStoreNames }; //# sourceMappingURL=CryptoKeyStore.js.map","map":null,"metadata":{},"sourceType":"module"}